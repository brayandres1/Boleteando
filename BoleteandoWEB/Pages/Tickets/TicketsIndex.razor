@page "/tickets"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


@if (ticket is null)
{
    <p>Cargando...</p>
}
else
{
    <div class="mt-3 card" style="width:55%; text-align:center; margin-left:10%">
        <div class="card-header">
            <span>
                <i class="oi oi-magnifying-glass" /> Consulte el estado de la boleta
                <button class="btn btn-sm btn-primary float-end mx-2" @onclick=@(() => SearchTicketAsync())><i class="oi oi-check" /> Buscar</button>
            </span>
        </div>
        <div class="card-body">
            <div class="row" style="text-align:center; display:inline-block">
                <input style="width: 320px;" class="form-control" id="txtTicket" type="number" placeholder="Escriba el codigo del ticket" min="1" @bind-value="@TicketId" />
            </div>

        </div>
    </div>

    @if (enableContet)
    {
        <div class="mt-3 card" style="width:55%; text-align:center; margin-left:10%">
            <div class="card-header">
                <span>
                    <i class="oi oi-account-login" /> Puerta de ingreso
                </span>
            </div>
            <div class="card-body">
                <div style="margin-top:20px">
                    <select class="form-select" @bind="@Puerta">
                        <option value="Norte">Norte</option>
                        <option value="Sur">Sur</option>
                        <option value="Este">Este</option>
                        <option value="Oeste">Oeste</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="mt-3 card" style="width:55%; text-align:center; margin-left:10%">
            <div class="card-header">
                <span>
                    <i class="oi oi-calendar" /> Fecha de ingreso
                </span>
            </div>
            <div class="card-body">
                <div style="margin-top:20px">
                    <input class="form-control" @bind-value="ticket!.DateUsed" type="datetime">
                </div>
                <div>
                    <button @onclick="@(() => RegisterTicketAsync())" class="btn btn-primary" style="margin-top:20px">Registrar boleta</button>
                </div>
            </div>
        </div>
    }
}





@code {        
    Ticket? ticket = new Ticket();
    private int TicketId { get; set; }       
    bool enableContet { get; set; } = false;
    string Puerta { get; set; }


    private async Task SearchTicketAsync()
    {

        var responseHttp = await repository.Get<Ticket>($"/api/tickets/{TicketId}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                await sweetAlertService.FireAsync("Error", "Codigo de la boleta no es valida", SweetAlertIcon.Error);                                
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }


        ticket = responseHttp.Response;

        if (ticket!.State)
        {
            await sweetAlertService.FireAsync("Atención", $"La boleta ya fue usada el en la porteria {ticket.Goal} a las {ticket.DateUsed.ToString()}", SweetAlertIcon.Info);
        }
        else
        {
            await sweetAlertService.FireAsync("Atención", $"La boleta se encuentra disponible", SweetAlertIcon.Info);
            enableContet = true;
        }
    }

    private async Task RegisterTicketAsync()
    {
            ticket!.State = true;
            ticket.Goal = Puerta;

            var responseHttp = await repository.Put("/api/tickets/", ticket);
            if (responseHttp.Error)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }



            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.TopEnd,
                    ShowConfirmButton = false,
                    Timer = 5000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "La boleta se registró exitosamente.");
            
            ticket = new Ticket();
            TicketId = 0;
            enableContet = false;
        navigationManager.NavigateTo("/tickets");
       
       
    }

    
 
}